{"version":3,"sources":["hocs/withAuthRedirect.js","res/preloader.svg","api/api.js","serviceWorker.js","Redux/profileReducer.js","Redux/dialogsReducer.js","Redux/authReducer.js","Redux/appReducer.js","Redux/reduxStore.js","components/NavBar/NavBar.jsx","components/Music/Music.jsx","components/News/News.jsx","components/Settings/Settings.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialog/Dialog.jsx","components/common/FormsControls.jsx","utils/validators/index.js","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/AddPostForm/AddPostForm.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","components/Header/Header.jsx","components/Header/HeaderContainer.jsx","components/Login/LoginForm/LoginForm.jsx","components/Login/Login.jsx","hocs/withBrowserRouter.js","hocs/withStoreProvider.js","hocs/withSuspense.js","App.js","index.js","components/common/Preloader.jsx","utils/updateObjectInArray.js","Redux/friendsReducer.js"],"names":["withAuthRedirect","Component","withAuthRedirectComponent","this","props","isAuth","to","React","displayName","name","connect","state","auth","module","exports","axiosInstance","axios","withCredentials","baseURL","headers","profileApi","getUsersProfile","userId","get","response","data","getStatus","updateStatus","status","put","usersApi","getUsers","currentPage","pageSize","follow","friendId","post","unfollow","delete","authApi","getAuthData","login","email","password","rememberMe","captcha","logout","securityApi","getCaptcha","Boolean","window","location","hostname","match","ADD_POST","DELETE_POST","SET_PROFILE","TOGGLE_IS_FETCHING","SET_STATUS","initialState","fullName","profileImage","aboutMe","posts","isFetching","addPost","newPostText","type","setStatus","profileReducer","action","id","length","message","likeCount","filter","p","postId","photos","large","ADD_MESSAGE","dialogs","Name","messages","text","dialogsReducer","newMessageText","SET_USER_DATA","SET_CAPTCHA_URL","isCaptchaRequired","captchaUrl","authorizeUser","payload","toggleIsCaptchaRequired","flag","setCaptchaUrl","setAuthInfo","dispatch","a","resultCode","authReducer","isInitialized","appReducer","reducers","combineReducers","dialogPage","profilePage","friendsPage","friendsReducer","form","formReducer","app","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","NavBar","className","Dialogs","onClick","sayHi","person","setTimeout","alert","someone","News","width","src","Message","Dialog","path","FormControl","input","meta","elementClassName","touched","error","element","Textarea","Input","required","value","maxLengthCreator","maxLength","maxLength100","reduxForm","onSubmit","handleSubmit","Field","component","placeholder","validate","dialogsElements","map","dialog","key","messagesElements","formData","addMessage","DialogsContainer","ProfileStatusWithHooks","useState","editMode","setEditMode","useEffect","onChange","e","currentTarget","onBlur","changeStatus","autoFocus","onDoubleClick","ProfileInfo","Post","maxLength10","MyPosts","postElements","MyPostsContainer","Profile","ProfileContainer","params","authorizedUserId","history","push","getUsersStatus","prevProps","prevState","snapshot","withRouter","toggleIsFetching","profileData","Header","HeaderContainer","Login","url","stopSubmit","_error","withBrowserRouter","withBrowserRouterComponent","withStoreProvider","withStoreProviderComponent","withSuspense","withSuspenseComponent","fallback","Preloader","FriendsContainer","lazy","App","initializeApp","render","Music","Settings","exact","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","preloader","updateObjectInArray","objArray","objKeyName","objKeyValue","newObjProps","obj","SET_FRIENDS","TOGGLE_FOLLOWED","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","friends","totalUsersCount","isFollowingInProgress","toggleFollowed","setCurrentPage","pageNumber","toggleIsFollowingInProgress","getFriends","items","totalCount","toggleFollowingFriend","asyncFunction","followed"],"mappings":"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","file":"static/js/main.07479905.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst withAuthRedirect = (Component) => {\r\n    class withAuthRedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n            return <Component {...this.props}/>;\r\n        }\r\n    }\r\n\r\n    withAuthRedirectComponent.displayName = `withAuthRedirect(${Component.displayName\r\n    || Component.name\r\n    || 'Component'})`;\r\n\r\n    const mapStateToProps = (state) => {\r\n        return {\r\n            isAuth: state.auth.isAuth,\r\n        }\r\n    }\r\n    return connect(mapStateToProps, {})(withAuthRedirectComponent);\r\n}\r\n\r\nexport default withAuthRedirect;\r\n","module.exports = __webpack_public_path__ + \"static/media/preloader.4f318f35.svg\";","import * as axios from \"axios\";\r\n\r\nconst axiosInstance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': '4c7b227d-d83d-45ab-9f12-6ba2c0dc507f',\r\n    },\r\n});\r\n\r\nexport const profileApi = {\r\n    async getUsersProfile(userId) {\r\n        const response = await axiosInstance.get(`profile/${userId}`);\r\n        return response.data;\r\n    },\r\n    async getStatus(userId) {\r\n        const response = await axiosInstance.get(`profile/status/${userId}`);\r\n        return response.data;\r\n    },\r\n    async updateStatus(status) {\r\n        const response = await axiosInstance.put('profile/status', {status: status});\r\n        return response.data;\r\n    },\r\n};\r\n\r\nexport const usersApi = {\r\n    async getUsers(currentPage = 1, pageSize = 10) {\r\n        const response = await axiosInstance.get(`users?page=${currentPage}&count=${pageSize}`);\r\n        return response.data;\r\n    },\r\n\r\n    async follow(friendId) {\r\n        const response = await axiosInstance.post(`follow/${friendId}`);\r\n        return response.data;\r\n    },\r\n\r\n    async unfollow(friendId) {\r\n        const response = await axiosInstance.delete(`follow/${friendId}`);\r\n        return response.data;\r\n    },\r\n};\r\n\r\nexport const authApi = {\r\n    async getAuthData() {\r\n        const response = await axiosInstance.get('auth/me');\r\n        return response.data;\r\n    },\r\n    async login(email, password, rememberMe, captcha) {\r\n        const response = await axiosInstance.post('/auth/login', {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha,\r\n        });\r\n        return response.data;\r\n    },\r\n    async logout() {\r\n        const response = await axiosInstance.delete('/auth/login');\r\n        return response.data;\r\n    },\r\n};\r\n\r\nexport const securityApi = {\r\n    async getCaptcha() {\r\n        const response = await axiosInstance.get('/security/get-captcha-url');\r\n        return response.data;\r\n    },\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {profileApi} from \"../api/api\";\r\n\r\nconst ADD_POST = 'social-network/profile/ADD-POST';\r\nconst DELETE_POST = 'social-network/profile/DELETE_POST';\r\nconst SET_PROFILE = 'social-network/profile/SET_PROFILE';\r\nconst TOGGLE_IS_FETCHING = 'social-network/profile/TOGGLE_IS_FETCHING';\r\nconst SET_STATUS = 'social-network/profile/SET_STATUS';\r\n\r\nlet initialState = {\r\n    fullName: '',\r\n    profileImage: '',\r\n    aboutMe: '',\r\n    posts: [],\r\n    isFetching: false,\r\n    status: '',\r\n};\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            let post = {\r\n                id: state.posts.length,\r\n                message: action.newPostText,\r\n                likeCount: 2,\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, post],\r\n            };\r\n        case DELETE_POST:\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter((p) => p.id !== action.postId),\r\n            };\r\n        case SET_PROFILE:\r\n            return {\r\n                ...state,\r\n                fullName: action.fullName,\r\n                aboutMe: action.aboutMe,\r\n                profileImage: action.photos.large || '',\r\n            };\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: !state.isFetching,\r\n            };\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const addPost = (newPostText) => ({type: ADD_POST, newPostText});\r\nexport const deletePost = (postId) => ({type: ADD_POST, postId});\r\nexport const setProfile = (profileData) => ({type: SET_PROFILE, ...profileData,});\r\nexport const toggleIsFetching = () => ({type: TOGGLE_IS_FETCHING,});\r\nexport const setStatus = (status) => ({type: SET_STATUS, status,});\r\n\r\nexport const getUsersProfile = (userId) => {\r\n    return async (dispatch) => {\r\n        const data = await profileApi.getUsersProfile(userId);\r\n        dispatch(setProfile(data));\r\n    }\r\n};\r\n\r\nexport const getUsersStatus = (userId) => {\r\n    return async (dispatch) => {\r\n        const status = await profileApi.getStatus(userId);\r\n        dispatch(setStatus(status));\r\n    }\r\n};\r\n\r\nexport const changeStatus = (status) => {\r\n    return async (dispatch) => {\r\n        const data = await profileApi.updateStatus(status);\r\n        if (data.resultCode === 0) {\r\n            dispatch(setStatus(status));\r\n        }\r\n    };\r\n};\r\n\r\nexport default profileReducer;\r\n","const ADD_MESSAGE = 'social-network/dialogs/ADD-MESSAGE';\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 0, Name: 'Masha'},\r\n        {id: 1, Name: 'Misha'},\r\n        {id: 2, Name: 'Lena'},\r\n        {id: 3, Name: 'Pasha'},\r\n        {id: 4, Name: 'Dima'},\r\n    ],\r\n\r\n    messages: [\r\n        {id: 0, text: 'buy'},\r\n        {id: 1, text: 'hello'},\r\n        {id: 2, text: 'hey'},\r\n        {id: 3, text: 'where are you'},\r\n        {id: 4, text: 'miss u'},\r\n    ],\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            let message = {\r\n                id: state.messages.length,\r\n                // text: state.newMessageText,\r\n                text: action.newMessageText,\r\n            };\r\n            return  {\r\n                ...state,\r\n                messages: [...state.messages, message],\r\n            };\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport const addMessage = (newMessageText) => ({type: ADD_MESSAGE, newMessageText});\r\n\r\nexport default dialogsReducer;\r\n","import {authApi, securityApi} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = 'social-network/auth/SET_USER_DATA';\r\nconst TOGGLE_IS_CAPTCHA_REQUIRED = 'social-network/auth/TOGGLE_IS_CAPTCHA_REQUIRED';\r\nconst SET_CAPTCHA_URL = 'social-network/auth/SET_CAPTCHA_URL';\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    login: null,\r\n    email: null,\r\n    isAuth: false,\r\n    isCaptchaRequired: false,\r\n    captchaUrl: null,\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            };\r\n        case TOGGLE_IS_CAPTCHA_REQUIRED:\r\n            return {\r\n                ...state,\r\n                isCaptchaRequired: action.flag,\r\n            };\r\n        case SET_CAPTCHA_URL:\r\n            return {\r\n                ...state,\r\n                captchaUrl: action.captchaUrl\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const authorizeUser = (userId, login, email, isAuth) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        payload: {userId, login, email, isAuth},\r\n    }\r\n};\r\nexport const toggleIsCaptchaRequired = (flag) => ({type: TOGGLE_IS_CAPTCHA_REQUIRED, flag});\r\nexport const setCaptchaUrl = (captchaUrl) => ({type: SET_CAPTCHA_URL, captchaUrl});\r\n\r\nexport const setAuthInfo = () => {\r\n    return async (dispatch) => {\r\n        const data = await authApi.getAuthData();\r\n        if (data.resultCode === 0) {\r\n            let {id, login, email} = data.data;\r\n            dispatch(authorizeUser(id, login, email, true));\r\n        }\r\n    }\r\n};\r\n\r\nexport const getCaptcha = () => {\r\n    return async (dispatch) => {\r\n        const data = await securityApi.getCaptcha();\r\n        dispatch(setCaptchaUrl(data.url));\r\n    }\r\n};\r\n\r\nexport const login = (email, password, rememberMe, captcha) => {\r\n    return async (dispatch) => {\r\n        const data = await authApi.login(email, password, rememberMe, captcha);\r\n        dispatch(toggleIsCaptchaRequired(false));\r\n\r\n        if (data.resultCode === 0) {\r\n            dispatch(setAuthInfo());\r\n            dispatch(setCaptchaUrl(null));\r\n        } else {\r\n            if (data.resultCode === 10) {\r\n                dispatch(toggleIsCaptchaRequired(true));\r\n                dispatch(getCaptcha());\r\n            }\r\n            let message = data.messages.length > 0 ? data.messages[0] : 'Something wrong';\r\n            dispatch(stopSubmit('login', {_error: message}));\r\n        }\r\n    }\r\n};\r\n\r\nexport const logout = () => {\r\n    return async (dispatch) => {\r\n        const data = await authApi.logout();\r\n        if (data.resultCode === 0) {\r\n            dispatch(authorizeUser(null, null, null, false));\r\n        }\r\n    }\r\n};\r\n\r\nexport default authReducer;\r\n","import {setAuthInfo} from \"./authReducer\";\r\n\r\nconst TOGGLE_IS_INITIALIZED = 'social-network/app/TOGGLE_IS_INITIALIZED';\r\n\r\nconst initialState = {\r\n    isInitialized: false\r\n};\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case TOGGLE_IS_INITIALIZED :\r\n            return {\r\n                ...state,\r\n                isInitialized: action.flag,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const toggleIsInitialized = (flag) => ({type: TOGGLE_IS_INITIALIZED, flag});\r\n\r\nexport const initializeApp = () => {\r\n    return async (dispatch) => {\r\n        await dispatch(setAuthInfo());\r\n        dispatch(toggleIsInitialized(true));\r\n    }\r\n};\r\n\r\nexport default appReducer;\r\n","import {applyMiddleware, combineReducers, compose, createStore} from 'redux';\r\nimport profileReducer from './profileReducer';\r\nimport dialogsReducer from './dialogsReducer';\r\nimport friendsReducer from './friendsReducer';\r\nimport authReducer from './authReducer';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {reducer as formReducer} from \"redux-form\";\r\nimport appReducer from \"./appReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    dialogPage: dialogsReducer,\r\n    profilePage: profileReducer,\r\n    friendsPage: friendsReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(\r\n    applyMiddleware(thunkMiddleware)\r\n));\r\n\r\n/*let store = createStore(\r\n    reducers,\r\n    applyMiddleware(thunkMiddleware),\r\n);*/\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport './NavBar.css'\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <div className='navbar'>\r\n            <nav >\r\n                <div><NavLink className='NavBar-NavLink' to='/profile'>Profile</NavLink></div>\r\n                <div><NavLink className='NavBar-NavLink' to='/dialogs'>Messages</NavLink></div>\r\n                <div><NavLink className='NavBar-NavLink' to='/news'>News</NavLink></div>\r\n                <div><NavLink className='NavBar-NavLink' to='/music'>Music</NavLink></div>\r\n                <div><NavLink className='NavBar-NavLink' to='/friends'>Friends</NavLink></div>\r\n                <div><NavLink className='NavBar-NavLink' to='/settings'>Settings</NavLink></div>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\n\r\n\r\nconst Dialogs = () => {\r\n    let count = 2;\r\n    return (\r\n        <div>\r\n            {count}\r\n            <button onClick={() => {\r\n                let sayHi = (person) => {\r\n                    let name = person.name;\r\n                    setTimeout(() => {\r\n                        alert('Hello, ' + someone.name);\r\n                    }, 3000);\r\n                };\r\n\r\n                let someone = {name: 'Dan'};\r\n                sayHi(someone);\r\n\r\n                someone = {name: 'Yuzhi'};\r\n                sayHi(someone);\r\n\r\n                someone = {name: 'Dominic'};\r\n                sayHi(someone);\r\n            }}>say hi</button>\r\n            hello vanya\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dialogs\r\n","import React from 'react';\r\nimport './News.css'\r\n\r\nconst News = () => {\r\n    return (\r\n        <div className='news'>\r\n            <h1>У Маши день рождения!!!!!!</h1>\r\n            <img width='400px' src='https://i.pinimg.com/originals/d0/40/d3/d040d35c4329b603f887b7344af88c64.jpg'/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default News\r\n","import React from 'react';\r\n\r\n\r\nconst Dialogs = () => {\r\n    return (\r\n        <div>\r\n            hello vanya\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dialogs\r\n","import React from 'react';\r\nimport './Message.css'\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div>\r\n            {props.text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import React from 'react';\r\nimport './Dialog.css'\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst Dialog = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n\r\n    return (\r\n        <div >\r\n            <NavLink to={path} className='Dialog-NavLink'>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialog\r\n","import React from \"react\";\r\nimport './FormsControl.css'\r\n\r\nexport const FormControl = ({input, meta, ...props}) => {\r\n    let elementClassName = meta.touched && meta.error ? 'FormError-Input' : null;\r\n    return (\r\n        <div className='FormError'>\r\n            <props.element {...input} {...props}\r\n                           className={elementClassName}\r\n            />\r\n            {meta.touched && meta.error && <span className='FormError-Text'>{meta.error}</span>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    return (\r\n        <FormControl {...props} element='textarea'/>\r\n    )\r\n}\r\n\r\nexport const Input = (props) => {\r\n    return (\r\n        <FormControl {...props} element='input'/>\r\n    )\r\n}\r\n","export const required = (value) => {\r\n    if (value) return undefined;\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => {\r\n    return (value) => {\r\n        if (value && value.length > maxLength) return `Max length is ${maxLength} symbols!`;\r\n        return undefined;\r\n    }\r\n}\r\n","import {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators\";\r\nimport React from \"react\";\r\n\r\nconst maxLength100 = maxLengthCreator(100);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} >\r\n            <Field\r\n                component={Textarea}\r\n                name={'newMessageText'}\r\n                placeholder={'Enter new message:'}\r\n                validate={[required, maxLength100]}\r\n            />\r\n            <div>\r\n                <button>add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({\r\n    form: 'dialogAddMessageForm'\r\n})(AddMessageForm)\r\n","import React from 'react';\r\nimport './Dialogs.css'\r\nimport Message from './Message/Message';\r\nimport Dialog from './Dialog/Dialog';\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\n\r\nconst Dialogs = (props) => {\r\n    const dialogsElements = props.dialogPage.dialogs.map((dialog) => {\r\n        return (\r\n            <Dialog\r\n                id={dialog.id}\r\n                name={dialog.Name}\r\n                key={dialog.id}\r\n            />\r\n        );\r\n    });\r\n\r\n    const messagesElements = props.dialogPage.messages.map((message) => {\r\n        return <Message text={message.text} key={message.id}/>\r\n    });\r\n\r\n    const addMessage = (formData) => {\r\n        props.addMessage(formData.newMessageText);\r\n    }\r\n\r\n    return (\r\n        <div className='dialogs'>\r\n            <div className='dialogs__dialogs-list'>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className='dialogs__messages'>\r\n                {messagesElements}\r\n                <AddMessageForm onSubmit={addMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dialogs\r\n","import React from 'react';\r\nimport './Dialogs.css'\r\nimport {\r\n    addMessage,\r\n} from '../../Redux/dialogsReducer';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {compose} from \"redux\";\r\nimport withAuthRedirect from \"../../hocs/withAuthRedirect\";\r\n\r\nclass DialogsContainer extends React.Component {\r\n    render() {\r\n        return <Dialogs {...this.props}/>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogPage: state.dialogPage,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, {\r\n        addMessage,\r\n    }),\r\n)(DialogsContainer)\r\n","import React from \"react\";\r\n\r\nclass ProfileStatus extends React.Component {\r\n    state = {\r\n        editMode: false,\r\n        statusValue: this.props.status, //TODO почему-то при обновлении страницы инпут пустой,\r\n        // если перезайти на вкладку(не обновлять) то инпут снова синхронизированн\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({statusValue: this.props.status,});\r\n        }\r\n    }\r\n\r\n    toggleEditMode = (flag) => {\r\n        this.setState({\r\n            editMode: flag,\r\n        });\r\n    }\r\n\r\n    saveStatus = () => {\r\n        this.props.changeStatus(this.state.statusValue);\r\n        this.toggleEditMode(false);\r\n    }\r\n\r\n    onStatusChange = (e) => {\r\n        this.setState({statusValue: e.currentTarget.value});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.state.editMode && (\r\n                    <div>\r\n                        <input\r\n                            type='text'\r\n                            value={this.state.statusValue}\r\n                            onChange={this.onStatusChange}\r\n                            onBlur={this.saveStatus}\r\n                            autoFocus\r\n                        />\r\n                    </div>\r\n                )}\r\n                {!this.state.editMode && (\r\n                    <div onDoubleClick={() => this.toggleEditMode(true)}>\r\n                        <span>{this.props.status  || 'How are you doing?'}</span>\r\n                    </div>\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileStatus;\r\n","import React, {useEffect, useState} from \"react\";\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    const saveStatus = () => {\r\n        props.changeStatus(status);\r\n        setEditMode(false);\r\n    };\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    return (\r\n        <>\r\n            {editMode && (\r\n                <div>\r\n                    <input\r\n                        type='text'\r\n                        value={status}\r\n                        onChange={onStatusChange}\r\n                        onBlur={saveStatus}\r\n                        autoFocus\r\n                    />\r\n                </div>\r\n            )}\r\n            {!editMode && (\r\n                <div onDoubleClick={() => setEditMode(true)}>\r\n                    <span>{props.status || 'How are you doing?'}</span>\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from 'react';\r\nimport './ProfileInfo.css'\r\nimport ProfileStatus from './ProfileStatus'\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\nconst ProfileInfo = (props) => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img className='profile__image'\r\n                     src={props.profileImage}/>\r\n            </div>\r\n            <div>\r\n                <div>{props.fullName}</div>\r\n                <div>{props.aboutMe}</div>\r\n                <ProfileStatusWithHooks\r\n                    status={props.status}\r\n                    changeStatus={props.changeStatus}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileInfo\r\n","import React from 'react';\r\nimport './Post.css'\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className='post'>\r\n            <img src='https://yt3.ggpht.com/a/AGF-l78D8sRdVCMJf7gg7Is2apd6wxydsVsoRJ6zPQ=s900-c-k-c0xffffffff-no-rj-mo'/>\r\n            {props.message}\r\n            <div>\r\n                {props.likeCount} likes\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post\r\n","import {maxLengthCreator, required} from \"../../../utils/validators\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls\";\r\nimport React from \"react\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    name='newPostText'\r\n                    component={Textarea}\r\n                    placeholder='Enter new post text'\r\n                    validate={[required, maxLength10]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({\r\n    form: 'profileAddPostForm',\r\n})(AddPostForm)\r\n","import React from 'react';\r\nimport Post from './Post/Post';\r\nimport './MyPosts.css'\r\nimport AddPostForm from \"../AddPostForm/AddPostForm\";\r\n\r\n\r\nconst MyPosts = (props) => {\r\n    let postElements = props.posts.map((post) => {\r\n        return <Post\r\n            message={post.message}\r\n            likeCount={post.likeCount}\r\n            key={post.id}\r\n        />\r\n    });\r\n\r\n    let addPost = (formData) => {\r\n        props.addPost(formData.newPostText);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className='my-posts__new-post'>\r\n                <AddPostForm onSubmit={addPost}/>\r\n            </div>\r\n            <div className='my-posts__post-list'>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyPosts\r\n","import React from 'react';\r\nimport './MyPosts.css'\r\nimport {addPost} from '../../../Redux/profileReducer';\r\nimport MyPosts from './MyPosts';\r\nimport {connect} from 'react-redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, {\r\n    addPost,\r\n})(MyPosts);\r\n\r\nexport default MyPostsContainer\r\n","import React from 'react';\r\nimport './Profile.css'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div className='profile'>\r\n            <ProfileInfo\r\n                fullName={props.fullName}\r\n                profileImage={props.profileImage}\r\n                aboutMe={props.aboutMe}\r\n                status={props.status}\r\n                changeStatus={props.changeStatus}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n","import * as React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {addPost, changeStatus, getUsersProfile, getUsersStatus} from \"../../Redux/profileReducer\";\r\nimport {toggleIsFetching} from \"../../Redux/friendsReducer\";\r\nimport Preloader from \"../common/Preloader\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n    //TODO toggle isFetching вынести в отдельный редюсер\r\n    //TODO все перекинуть в hooks либо деструктуризировать пропсы\r\n    componentDidMount() {\r\n        // this.props.toggleIsFetching();\r\n        let userId = this.props.match.params.userId || this.props.authorizedUserId;\r\n        if (!userId) {\r\n            this.props.history.push('/login');\r\n        }\r\n        this.props.getUsersProfile(userId);\r\n        this.props.getUsersStatus(userId);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            let userId = this.props.match.params.userId || this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n            this.props.getUsersProfile(userId);\r\n            this.props.getUsersStatus(userId); //TODO Remove duplicated code\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {/*{this.props.isFetching && <Preloader />}*/}\r\n                <Profile {...this.props}/>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth,\r\n        ...state.profilePage,\r\n    }\r\n};\r\n\r\nexport default compose(\r\n    withRouter,\r\n    connect(mapStateToProps, {\r\n        addPost,\r\n        toggleIsFetching,\r\n        getUsersProfile,\r\n        getUsersStatus,\r\n        changeStatus,\r\n    }),\r\n)(ProfileContainer)\r\n","import React from 'react'\r\nimport './Header.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <header className='header'>\r\n            <img src='http://www.pngmart.com/files/3/Sunshine-PNG-Transparent.png'/>\r\n            <div className='LoginBlock'>\r\n                {props.isAuth && ( //TODO сделать красиво\r\n                    <div>\r\n                        {props.login}\r\n                        <br />\r\n                        <button onClick={props.logout}>Logout</button>\r\n                    </div>\r\n                )}\r\n                {!props.isAuth && <NavLink to='/login'>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import Header from './Header';\r\nimport React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {logout} from '../../Redux/authReducer';\r\n\r\nclass HeaderContainer extends React.Component {\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    logout,\r\n})(HeaderContainer);\r\n","import {Field, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {Input} from \"../../common/FormsControls\";\r\nimport {required} from \"../../../utils/validators\";\r\nimport '../../common/FormsControl.css'\r\n\r\nconst LoginForm = (props) => {\r\n    return (<div>\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder={'Login'}\r\n                    name={'login'}\r\n                    type='text'\r\n                    component={Input}\r\n                    validate={[required]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    placeholder={'Password'}\r\n                    name={'password'}\r\n                    type='password'\r\n                    component={Input}\r\n                    validate={[required]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    name={'rememberMe'}\r\n                    type='checkbox'\r\n                    component={Input}\r\n                />\r\n                remember me\r\n            </div>\r\n            {props.error && (\r\n                <div className=\"FormError_summary\">\r\n                    Incorrect login or password\r\n                </div>\r\n            )}\r\n            {props.isCaptchaRequired && (\r\n                <div>\r\n                    <Field\r\n                        name={'captcha'}\r\n                        placeholder={'captcha'}\r\n                        type='text'\r\n                        validate={[required]}\r\n                        component={Input}\r\n                    />\r\n                </div>\r\n            )}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    </div>)\r\n}\r\n\r\nexport default reduxForm({form: 'login'})(LoginForm);\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../Redux/authReducer\";\r\nimport LoginForm from \"./LoginForm/LoginForm\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nclass Login extends React.Component {\r\n    render() {\r\n        const onSubmit = (formData) => {\r\n            this.props.login(formData.login, formData.password, formData.rememberMe, formData.captcha);\r\n        };\r\n\r\n        if (this.props.isAuth) return <Redirect to='/profile'/>;\r\n\r\n        return (\r\n            <div>\r\n                <h1>Login</h1>\r\n                <LoginForm\r\n                    onSubmit={onSubmit}\r\n                    isCaptchaRequired={this.props.isCaptchaRequired}\r\n                />\r\n                {this.props.isCaptchaRequired && <img src={this.props.captchaUrl}/>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        isCaptchaRequired: state.auth.isCaptchaRequired,\r\n        captchaUrl: state.auth.captchaUrl,\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    login\r\n})(Login) //TODO сделать контейнер\r\n","import {BrowserRouter} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nconst withBrowserRouter = (Component) => {\r\n    let withBrowserRouterComponent = (props) => {\r\n        return (\r\n            <BrowserRouter>\r\n                <Component {...props} />\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n\r\n    withBrowserRouterComponent.displayName = `withBrowserRouter(${Component.displayName\r\n    || Component.name\r\n    || 'Component'})`;\r\n\r\n    return withBrowserRouterComponent;\r\n};\r\n\r\nexport default withBrowserRouter;\r\n","import {Provider} from \"react-redux\";\r\nimport store from \"../Redux/reduxStore\";\r\nimport React from \"react\";\r\n\r\nconst withStoreProvider = (Component) => {\r\n    const withStoreProviderComponent = (props) => {\r\n        return (\r\n            <Provider store={store}>\r\n                <Component {...props} />\r\n            </Provider>\r\n        )\r\n    }\r\n\r\n    withStoreProviderComponent.displayName = `withStoreProvider(${Component.displayName\r\n    || Component.name\r\n    || 'Component'})`;\r\n\r\n    return withStoreProviderComponent;\r\n}\r\n\r\nexport default withStoreProvider;\r\n","import React, {Suspense} from \"react\";\r\nimport Preloader from \"../components/common/Preloader\";\r\n\r\nconst withSuspense = (Component) => {\r\n    const withSuspenseComponent = (props) => {\r\n        return (\r\n            <Suspense fallback={<Preloader />}>\r\n                <Component {...props} />\r\n            </Suspense>\r\n        );\r\n    };\r\n\r\n    withSuspenseComponent.displayName = `withSuspense(${Component.displayName\r\n    || Component.Name\r\n    || 'Component'})`;\r\n\r\n    return withSuspenseComponent;\r\n};\r\n\r\nexport default withSuspense;\r\n","import React, {lazy} from 'react';\r\nimport './App.css';\r\nimport NavBar from './components/NavBar/NavBar';\r\nimport {Route, withRouter} from 'react-router-dom';\r\nimport Music from './components/Music/Music';\r\nimport News from './components/News/News';\r\nimport Settings from './components/Settings/Settings';\r\nimport DialogsContainer from './components/Dialogs/DialogsContainer';\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Login from \"./components/Login/Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./Redux/appReducer\";\r\nimport Preloader from \"./components/common/Preloader\";\r\nimport withBrowserRouter from \"./hocs/withBrowserRouter\";\r\nimport withStoreProvider from \"./hocs/withStoreProvider\";\r\nimport withSuspense from \"./hocs/withSuspense\";\r\n\r\nconst FriendsContainer = React.lazy(() => import(\"./components/Friends/FriendsContainer\"));\r\n\r\nclass App extends React.Component {\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.isInitialized) {\r\n            return <Preloader />\r\n        }\r\n        // TODO content component\r\n        return (\r\n            <div className='app-wrapper'>\r\n                <div className='app-wrapper__header'><HeaderContainer/></div>\r\n                <div className='app-wrapper__nav'><NavBar/></div>\r\n                <div className='app-wrapper__content'>\r\n                    <Route path='/dialogs' render={() => <DialogsContainer/>}/>\r\n                    <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\r\n                    <Route path='/news' render={() => <News/>}/>\r\n                    <Route path='/music' render={() => <Music/>}/>\r\n                    <Route path='/friends' render={() => withSuspense(FriendsContainer)()}/>\r\n                    <Route path='/settings' render={() => <Settings/>}/>\r\n                    <Route path='/login' render={() => <Login/>}/>\r\n                    <Route exact path='/' render={() => <Login/>}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isInitialized: state.app.isInitialized,\r\n    }\r\n};\r\n\r\nexport default compose(\r\n    withBrowserRouter,\r\n    withStoreProvider,\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}),\r\n)(App);\r\n","import React from 'react';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./Redux/reduxStore\"\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n","import preloader from \"../../res/preloader.svg\";\r\nimport React from \"react\";\r\n\r\nlet Preloader = (props) => {\r\n    return (\r\n        <div>\r\n            <img className='preloader' src={preloader} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader;\r\n","export const updateObjectInArray = (objArray, objKeyName, objKeyValue, newObjProps) => {\r\n    return objArray.map(obj => {\r\n        if(obj[objKeyName] === objKeyValue) {\r\n            return {...obj, ...newObjProps}\r\n        }\r\n        return obj;\r\n    })\r\n};\r\n","import {usersApi} from \"../api/api\";\r\nimport {updateObjectInArray} from \"../utils/updateObjectInArray\";\r\n\r\nconst SET_FRIENDS = 'social-network/friends/SET_FRIENDS';\r\nconst TOGGLE_FOLLOWED = 'social-network/friends/TOGGLE_FOLLOWED';\r\nconst SET_CURRENT_PAGE = 'social-network/friends/SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'social-network/friends/SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'social-network/friends/TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_IN_PROGRESS = 'social-network/friends/TOGGLE_IS_FOLLOWING_IN_PROGRESS';\r\n\r\nlet initialState = {\r\n    friends: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 20,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    isFollowingInProgress: false,\r\n};\r\n\r\nconst friendsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_FRIENDS:\r\n            return {\r\n                ...state,\r\n                friends: [...action.friends],\r\n            };\r\n        case TOGGLE_FOLLOWED:\r\n            return {\r\n                ...state,\r\n                friends: updateObjectInArray(\r\n                    state.friends,\r\n                    'id',\r\n                    action.friendId,\r\n                    {followed: action.flag,}\r\n                    ),\r\n            };\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.pageNumber,\r\n            };\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalCount,\r\n            };\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.flag,\r\n            };\r\n        case TOGGLE_IS_FOLLOWING_IN_PROGRESS:\r\n            return {\r\n                ...state,\r\n                isFollowingInProgress: action.flag,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setFriends = (friends) => ({type: SET_FRIENDS, friends,});\r\nexport const toggleFollowed = (friendId, flag) => ({type: TOGGLE_FOLLOWED, friendId, flag});\r\nexport const setCurrentPage = (pageNumber) => ({type: SET_CURRENT_PAGE, pageNumber,});\r\nexport const setTotalUsersCount = (totalCount) => ({type: SET_TOTAL_USERS_COUNT, totalCount,});\r\nexport const toggleIsFetching = (flag) => ({type: TOGGLE_IS_FETCHING, flag});\r\nexport const toggleIsFollowingInProgress = (flag) => ({type: TOGGLE_IS_FOLLOWING_IN_PROGRESS, flag});\r\n\r\nexport const getFriends = (currentPage, pageSize) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetching(true));\r\n\r\n        const data = await usersApi.getUsers(currentPage, pageSize);\r\n\r\n        dispatch(setFriends(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n        dispatch(toggleIsFetching(false));\r\n    }\r\n};\r\n\r\nexport const toggleFollowingFriend = (friendId, flag) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFollowingInProgress(true));\r\n\r\n        const asyncFunction = flag ? usersApi.follow : usersApi.unfollow;\r\n        const data = await asyncFunction(friendId);\r\n\r\n        if (data.resultCode === 0) {\r\n            dispatch(toggleFollowed(friendId, flag));\r\n        }\r\n        dispatch(toggleIsFollowingInProgress(false));\r\n    }\r\n};\r\n\r\nexport default friendsReducer\r\n"],"sourceRoot":""}